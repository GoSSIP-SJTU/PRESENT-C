#include "present.h"

#define GenerateRoundKeys(round_key, key, round_counter) KeyUpdateFull((round_key), (key), (round_counter))
#define KeyUpdate(round_key, round_counter) KeyUpdateFull((round_key), (round_key), (round_counter))


// actually is (sbox[] << 4)
static const uint8_t sbox[16] = 
{
	0xC0, 0x50, 0x60, 0xB0, 0x90, 0x00, 0xA0, 0xD0, 0x30, 0xE0, 0xF0, 0x80, 0x40, 0x70, 0x10, 0x20,
};

// 0 1 2 3 4 5 6 7 ---- 0 4 1 5 2 6 3 7
static const uint8_t mix_row_0[256] = 
{
	0xF0, 0xB1, 0xB4, 0xE5, 0xE1, 0xA0, 0xE4, 0xF1, 0xA5, 0xF4, 0xF5, 0xE0, 0xB0, 0xB5, 0xA1, 0xA4, 
	0x72, 0x33, 0x36, 0x67, 0x63, 0x22, 0x66, 0x73, 0x27, 0x76, 0x77, 0x62, 0x32, 0x37, 0x23, 0x26, 
	0x78, 0x39, 0x3C, 0x6D, 0x69, 0x28, 0x6C, 0x79, 0x2D, 0x7C, 0x7D, 0x68, 0x38, 0x3D, 0x29, 0x2C, 
	0xDA, 0x9B, 0x9E, 0xCF, 0xCB, 0x8A, 0xCE, 0xDB, 0x8F, 0xDE, 0xDF, 0xCA, 0x9A, 0x9F, 0x8B, 0x8E, 
	0xD2, 0x93, 0x96, 0xC7, 0xC3, 0x82, 0xC6, 0xD3, 0x87, 0xD6, 0xD7, 0xC2, 0x92, 0x97, 0x83, 0x86, 
	0x50, 0x11, 0x14, 0x45, 0x41, 0x00, 0x44, 0x51, 0x05, 0x54, 0x55, 0x40, 0x10, 0x15, 0x01, 0x04, 
	0xD8, 0x99, 0x9C, 0xCD, 0xC9, 0x88, 0xCC, 0xD9, 0x8D, 0xDC, 0xDD, 0xC8, 0x98, 0x9D, 0x89, 0x8C, 
	0xF2, 0xB3, 0xB6, 0xE7, 0xE3, 0xA2, 0xE6, 0xF3, 0xA7, 0xF6, 0xF7, 0xE2, 0xB2, 0xB7, 0xA3, 0xA6, 
	0x5A, 0x1B, 0x1E, 0x4F, 0x4B, 0x0A, 0x4E, 0x5B, 0x0F, 0x5E, 0x5F, 0x4A, 0x1A, 0x1F, 0x0B, 0x0E, 
	0xF8, 0xB9, 0xBC, 0xED, 0xE9, 0xA8, 0xEC, 0xF9, 0xAD, 0xFC, 0xFD, 0xE8, 0xB8, 0xBD, 0xA9, 0xAC, 
	0xFA, 0xBB, 0xBE, 0xEF, 0xEB, 0xAA, 0xEE, 0xFB, 0xAF, 0xFE, 0xFF, 0xEA, 0xBA, 0xBF, 0xAB, 0xAE, 
	0xD0, 0x91, 0x94, 0xC5, 0xC1, 0x80, 0xC4, 0xD1, 0x85, 0xD4, 0xD5, 0xC0, 0x90, 0x95, 0x81, 0x84, 
	0x70, 0x31, 0x34, 0x65, 0x61, 0x20, 0x64, 0x71, 0x25, 0x74, 0x75, 0x60, 0x30, 0x35, 0x21, 0x24, 
	0x7A, 0x3B, 0x3E, 0x6F, 0x6B, 0x2A, 0x6E, 0x7B, 0x2F, 0x7E, 0x7F, 0x6A, 0x3A, 0x3F, 0x2B, 0x2E, 
	0x52, 0x13, 0x16, 0x47, 0x43, 0x02, 0x46, 0x53, 0x07, 0x56, 0x57, 0x42, 0x12, 0x17, 0x03, 0x06, 
	0x58, 0x19, 0x1C, 0x4D, 0x49, 0x08, 0x4C, 0x59, 0x0D, 0x5C, 0x5D, 0x48, 0x18, 0x1D, 0x09, 0x0C,
};

// 0 1 2 3 4 5 6 7 ---- 1 5 2 6 3 7 0 4
static const uint8_t mix_row_1[256] = 
{
	0xC3, 0xC6, 0xD2, 0x97, 0x87, 0x82, 0x93, 0xC7, 0x96, 0xD3, 0xD7, 0x83, 0xC2, 0xD6, 0x86, 0x92, 
	0xC9, 0xCC, 0xD8, 0x9D, 0x8D, 0x88, 0x99, 0xCD, 0x9C, 0xD9, 0xDD, 0x89, 0xC8, 0xDC, 0x8C, 0x98, 
	0xE1, 0xE4, 0xF0, 0xB5, 0xA5, 0xA0, 0xB1, 0xE5, 0xB4, 0xF1, 0xF5, 0xA1, 0xE0, 0xF4, 0xA4, 0xB0, 
	0x6B, 0x6E, 0x7A, 0x3F, 0x2F, 0x2A, 0x3B, 0x6F, 0x3E, 0x7B, 0x7F, 0x2B, 0x6A, 0x7E, 0x2E, 0x3A, 
	0x4B, 0x4E, 0x5A, 0x1F, 0x0F, 0x0A, 0x1B, 0x4F, 0x1E, 0x5B, 0x5F, 0x0B, 0x4A, 0x5E, 0x0E, 0x1A, 
	0x41, 0x44, 0x50, 0x15, 0x05, 0x00, 0x11, 0x45, 0x14, 0x51, 0x55, 0x01, 0x40, 0x54, 0x04, 0x10, 
	0x63, 0x66, 0x72, 0x37, 0x27, 0x22, 0x33, 0x67, 0x36, 0x73, 0x77, 0x23, 0x62, 0x76, 0x26, 0x32, 
	0xCB, 0xCE, 0xDA, 0x9F, 0x8F, 0x8A, 0x9B, 0xCF, 0x9E, 0xDB, 0xDF, 0x8B, 0xCA, 0xDE, 0x8E, 0x9A, 
	0x69, 0x6C, 0x78, 0x3D, 0x2D, 0x28, 0x39, 0x6D, 0x3C, 0x79, 0x7D, 0x29, 0x68, 0x7C, 0x2C, 0x38, 
	0xE3, 0xE6, 0xF2, 0xB7, 0xA7, 0xA2, 0xB3, 0xE7, 0xB6, 0xF3, 0xF7, 0xA3, 0xE2, 0xF6, 0xA6, 0xB2, 
	0xEB, 0xEE, 0xFA, 0xBF, 0xAF, 0xAA, 0xBB, 0xEF, 0xBE, 0xFB, 0xFF, 0xAB, 0xEA, 0xFE, 0xAE, 0xBA, 
	0x43, 0x46, 0x52, 0x17, 0x07, 0x02, 0x13, 0x47, 0x16, 0x53, 0x57, 0x03, 0x42, 0x56, 0x06, 0x12, 
	0xC1, 0xC4, 0xD0, 0x95, 0x85, 0x80, 0x91, 0xC5, 0x94, 0xD1, 0xD5, 0x81, 0xC0, 0xD4, 0x84, 0x90, 
	0xE9, 0xEC, 0xF8, 0xBD, 0xAD, 0xA8, 0xB9, 0xED, 0xBC, 0xF9, 0xFD, 0xA9, 0xE8, 0xFC, 0xAC, 0xB8, 
	0x49, 0x4C, 0x58, 0x1D, 0x0D, 0x08, 0x19, 0x4D, 0x1C, 0x59, 0x5D, 0x09, 0x48, 0x5C, 0x0C, 0x18, 
	0x61, 0x64, 0x70, 0x35, 0x25, 0x20, 0x31, 0x65, 0x34, 0x71, 0x75, 0x21, 0x60, 0x74, 0x24, 0x30,

};

// 0 1 2 3 4 5 6 7 ---- 2 6 3 7 0 4 1 5
static const uint8_t mix_row_2[256] = 
{
	0x0F, 0x1B, 0x4B, 0x5E, 0x1E, 0x0A, 0x4E, 0x1F, 0x5A, 0x4F, 0x5F, 0x0E, 0x0B, 0x5B, 0x1A, 0x4A, 
	0x27, 0x33, 0x63, 0x76, 0x36, 0x22, 0x66, 0x37, 0x72, 0x67, 0x77, 0x26, 0x23, 0x73, 0x32, 0x62, 
	0x87, 0x93, 0xC3, 0xD6, 0x96, 0x82, 0xC6, 0x97, 0xD2, 0xC7, 0xD7, 0x86, 0x83, 0xD3, 0x92, 0xC2, 
	0xAD, 0xB9, 0xE9, 0xFC, 0xBC, 0xA8, 0xEC, 0xBD, 0xF8, 0xED, 0xFD, 0xAC, 0xA9, 0xF9, 0xB8, 0xE8, 
	0x2D, 0x39, 0x69, 0x7C, 0x3C, 0x28, 0x6C, 0x3D, 0x78, 0x6D, 0x7D, 0x2C, 0x29, 0x79, 0x38, 0x68, 
	0x05, 0x11, 0x41, 0x54, 0x14, 0x00, 0x44, 0x15, 0x50, 0x45, 0x55, 0x04, 0x01, 0x51, 0x10, 0x40, 
	0x8D, 0x99, 0xC9, 0xDC, 0x9C, 0x88, 0xCC, 0x9D, 0xD8, 0xCD, 0xDD, 0x8C, 0x89, 0xD9, 0x98, 0xC8, 
	0x2F, 0x3B, 0x6B, 0x7E, 0x3E, 0x2A, 0x6E, 0x3F, 0x7A, 0x6F, 0x7F, 0x2E, 0x2B, 0x7B, 0x3A, 0x6A, 
	0xA5, 0xB1, 0xE1, 0xF4, 0xB4, 0xA0, 0xE4, 0xB5, 0xF0, 0xE5, 0xF5, 0xA4, 0xA1, 0xF1, 0xB0, 0xE0, 
	0x8F, 0x9B, 0xCB, 0xDE, 0x9E, 0x8A, 0xCE, 0x9F, 0xDA, 0xCF, 0xDF, 0x8E, 0x8B, 0xDB, 0x9A, 0xCA, 
	0xAF, 0xBB, 0xEB, 0xFE, 0xBE, 0xAA, 0xEE, 0xBF, 0xFA, 0xEF, 0xFF, 0xAE, 0xAB, 0xFB, 0xBA, 0xEA, 
	0x0D, 0x19, 0x49, 0x5C, 0x1C, 0x08, 0x4C, 0x1D, 0x58, 0x4D, 0x5D, 0x0C, 0x09, 0x59, 0x18, 0x48, 
	0x07, 0x13, 0x43, 0x56, 0x16, 0x02, 0x46, 0x17, 0x52, 0x47, 0x57, 0x06, 0x03, 0x53, 0x12, 0x42, 
	0xA7, 0xB3, 0xE3, 0xF6, 0xB6, 0xA2, 0xE6, 0xB7, 0xF2, 0xE7, 0xF7, 0xA6, 0xA3, 0xF3, 0xB2, 0xE2, 
	0x25, 0x31, 0x61, 0x74, 0x34, 0x20, 0x64, 0x35, 0x70, 0x65, 0x75, 0x24, 0x21, 0x71, 0x30, 0x60, 
	0x85, 0x91, 0xC1, 0xD4, 0x94, 0x80, 0xC4, 0x95, 0xD0, 0xC5, 0xD5, 0x84, 0x81, 0xD1, 0x90, 0xC0,

};

// 0 1 2 3 4 5 6 7 ---- 3 7 0 4 1 5 2 6
static const uint8_t mix_row_3[256] = 
{
	0x3C, 0x6C, 0x2D, 0x79, 0x78, 0x28, 0x39, 0x7C, 0x69, 0x3D, 0x7D, 0x38, 0x2C, 0x6D, 0x68, 0x29, 
	0x9C, 0xCC, 0x8D, 0xD9, 0xD8, 0x88, 0x99, 0xDC, 0xC9, 0x9D, 0xDD, 0x98, 0x8C, 0xCD, 0xC8, 0x89, 
	0x1E, 0x4E, 0x0F, 0x5B, 0x5A, 0x0A, 0x1B, 0x5E, 0x4B, 0x1F, 0x5F, 0x1A, 0x0E, 0x4F, 0x4A, 0x0B, 
	0xB6, 0xE6, 0xA7, 0xF3, 0xF2, 0xA2, 0xB3, 0xF6, 0xE3, 0xB7, 0xF7, 0xB2, 0xA6, 0xE7, 0xE2, 0xA3, 
	0xB4, 0xE4, 0xA5, 0xF1, 0xF0, 0xA0, 0xB1, 0xF4, 0xE1, 0xB5, 0xF5, 0xB0, 0xA4, 0xE5, 0xE0, 0xA1, 
	0x14, 0x44, 0x05, 0x51, 0x50, 0x00, 0x11, 0x54, 0x41, 0x15, 0x55, 0x10, 0x04, 0x45, 0x40, 0x01, 
	0x36, 0x66, 0x27, 0x73, 0x72, 0x22, 0x33, 0x76, 0x63, 0x37, 0x77, 0x32, 0x26, 0x67, 0x62, 0x23, 
	0xBC, 0xEC, 0xAD, 0xF9, 0xF8, 0xA8, 0xB9, 0xFC, 0xE9, 0xBD, 0xFD, 0xB8, 0xAC, 0xED, 0xE8, 0xA9, 
	0x96, 0xC6, 0x87, 0xD3, 0xD2, 0x82, 0x93, 0xD6, 0xC3, 0x97, 0xD7, 0x92, 0x86, 0xC7, 0xC2, 0x83, 
	0x3E, 0x6E, 0x2F, 0x7B, 0x7A, 0x2A, 0x3B, 0x7E, 0x6B, 0x3F, 0x7F, 0x3A, 0x2E, 0x6F, 0x6A, 0x2B, 
	0xBE, 0xEE, 0xAF, 0xFB, 0xFA, 0xAA, 0xBB, 0xFE, 0xEB, 0xBF, 0xFF, 0xBA, 0xAE, 0xEF, 0xEA, 0xAB, 
	0x34, 0x64, 0x25, 0x71, 0x70, 0x20, 0x31, 0x74, 0x61, 0x35, 0x75, 0x30, 0x24, 0x65, 0x60, 0x21, 
	0x1C, 0x4C, 0x0D, 0x59, 0x58, 0x08, 0x19, 0x5C, 0x49, 0x1D, 0x5D, 0x18, 0x0C, 0x4D, 0x48, 0x09, 
	0x9E, 0xCE, 0x8F, 0xDB, 0xDA, 0x8A, 0x9B, 0xDE, 0xCB, 0x9F, 0xDF, 0x9A, 0x8E, 0xCF, 0xCA, 0x8B, 
	0x94, 0xC4, 0x85, 0xD1, 0xD0, 0x80, 0x91, 0xD4, 0xC1, 0x95, 0xD5, 0x90, 0x84, 0xC5, 0xC0, 0x81, 
	0x16, 0x46, 0x07, 0x53, 0x52, 0x02, 0x13, 0x56, 0x43, 0x17, 0x57, 0x12, 0x06, 0x47, 0x42, 0x03,
};

static const uint8_t inv_sbox[16] = 
{
	0x5, 0xE, 0xF, 0x8, 0xC, 0x1, 0x2, 0xD, 0xB, 0x4, 0x6, 0x3, 0x0, 0x7, 0x9, 0xA,
};

static const uint8_t inv_sbox_2[256] = 
{
	0x55, 0x5e, 0x5f, 0x58, 0x5c, 0x51, 0x52, 0x5d, 0x5b, 0x54, 0x56, 0x53, 0x50, 0x57, 0x59, 0x5a,
	0xe5, 0xee, 0xef, 0xe8, 0xec, 0xe1, 0xe2, 0xed, 0xeb, 0xe4, 0xe6, 0xe3, 0xe0, 0xe7, 0xe9, 0xea,
	0xf5, 0xfe, 0xff, 0xf8, 0xfc, 0xf1, 0xf2, 0xfd, 0xfb, 0xf4, 0xf6, 0xf3, 0xf0, 0xf7, 0xf9, 0xfa,
	0x85, 0x8e, 0x8f, 0x88, 0x8c, 0x81, 0x82, 0x8d, 0x8b, 0x84, 0x86, 0x83, 0x80, 0x87, 0x89, 0x8a,
	0xc5, 0xce, 0xcf, 0xc8, 0xcc, 0xc1, 0xc2, 0xcd, 0xcb, 0xc4, 0xc6, 0xc3, 0xc0, 0xc7, 0xc9, 0xca,
	0x15, 0x1e, 0x1f, 0x18, 0x1c, 0x11, 0x12, 0x1d, 0x1b, 0x14, 0x16, 0x13, 0x10, 0x17, 0x19, 0x1a,
	0x25, 0x2e, 0x2f, 0x28, 0x2c, 0x21, 0x22, 0x2d, 0x2b, 0x24, 0x26, 0x23, 0x20, 0x27, 0x29, 0x2a,
	0xd5, 0xde, 0xdf, 0xd8, 0xdc, 0xd1, 0xd2, 0xdd, 0xdb, 0xd4, 0xd6, 0xd3, 0xd0, 0xd7, 0xd9, 0xda,
	0xb5, 0xbe, 0xbf, 0xb8, 0xbc, 0xb1, 0xb2, 0xbd, 0xbb, 0xb4, 0xb6, 0xb3, 0xb0, 0xb7, 0xb9, 0xba,
	0x45, 0x4e, 0x4f, 0x48, 0x4c, 0x41, 0x42, 0x4d, 0x4b, 0x44, 0x46, 0x43, 0x40, 0x47, 0x49, 0x4a,
	0x65, 0x6e, 0x6f, 0x68, 0x6c, 0x61, 0x62, 0x6d, 0x6b, 0x64, 0x66, 0x63, 0x60, 0x67, 0x69, 0x6a,
	0x35, 0x3e, 0x3f, 0x38, 0x3c, 0x31, 0x32, 0x3d, 0x3b, 0x34, 0x36, 0x33, 0x30, 0x37, 0x39, 0x3a,
	0x05, 0x0e, 0x0f, 0x08, 0x0c, 0x01, 0x02, 0x0d, 0x0b, 0x04, 0x06, 0x03, 0x00, 0x07, 0x09, 0x0a,
	0x75, 0x7e, 0x7f, 0x78, 0x7c, 0x71, 0x72, 0x7d, 0x7b, 0x74, 0x76, 0x73, 0x70, 0x77, 0x79, 0x7a,
	0x95, 0x9e, 0x9f, 0x98, 0x9c, 0x91, 0x92, 0x9d, 0x9b, 0x94, 0x96, 0x93, 0x90, 0x97, 0x99, 0x9a,
	0xa5, 0xae, 0xaf, 0xa8, 0xac, 0xa1, 0xa2, 0xad, 0xab, 0xa4, 0xa6, 0xa3, 0xa0, 0xa7, 0xa9, 0xaa,
};

// 0 1 2 3 4 5 6 7 ---- 0 4 1 5 2 6 3 7
// 0 1 2 3 4 5 6 7 ---- 0 2 4 6 1 3 5 7
static const uint8_t inv_mix_row_0[256] = 
{
	0x00, 0x01, 0x10, 0x11, 0x02, 0x03, 0x12, 0x13, 0x20, 0x21, 0x30, 0x31, 0x22, 0x23, 0x32, 0x33,
	0x04, 0x05, 0x14, 0x15, 0x06, 0x07, 0x16, 0x17, 0x24, 0x25, 0x34, 0x35, 0x26, 0x27, 0x36, 0x37,
	0x40, 0x41, 0x50, 0x51, 0x42, 0x43, 0x52, 0x53, 0x60, 0x61, 0x70, 0x71, 0x62, 0x63, 0x72, 0x73,
	0x44, 0x45, 0x54, 0x55, 0x46, 0x47, 0x56, 0x57, 0x64, 0x65, 0x74, 0x75, 0x66, 0x67, 0x76, 0x77,
	0x08, 0x09, 0x18, 0x19, 0x0a, 0x0b, 0x1a, 0x1b, 0x28, 0x29, 0x38, 0x39, 0x2a, 0x2b, 0x3a, 0x3b,
	0x0c, 0x0d, 0x1c, 0x1d, 0x0e, 0x0f, 0x1e, 0x1f, 0x2c, 0x2d, 0x3c, 0x3d, 0x2e, 0x2f, 0x3e, 0x3f,
	0x48, 0x49, 0x58, 0x59, 0x4a, 0x4b, 0x5a, 0x5b, 0x68, 0x69, 0x78, 0x79, 0x6a, 0x6b, 0x7a, 0x7b,
	0x4c, 0x4d, 0x5c, 0x5d, 0x4e, 0x4f, 0x5e, 0x5f, 0x6c, 0x6d, 0x7c, 0x7d, 0x6e, 0x6f, 0x7e, 0x7f,
	0x80, 0x81, 0x90, 0x91, 0x82, 0x83, 0x92, 0x93, 0xa0, 0xa1, 0xb0, 0xb1, 0xa2, 0xa3, 0xb2, 0xb3,
	0x84, 0x85, 0x94, 0x95, 0x86, 0x87, 0x96, 0x97, 0xa4, 0xa5, 0xb4, 0xb5, 0xa6, 0xa7, 0xb6, 0xb7,
	0xc0, 0xc1, 0xd0, 0xd1, 0xc2, 0xc3, 0xd2, 0xd3, 0xe0, 0xe1, 0xf0, 0xf1, 0xe2, 0xe3, 0xf2, 0xf3,
	0xc4, 0xc5, 0xd4, 0xd5, 0xc6, 0xc7, 0xd6, 0xd7, 0xe4, 0xe5, 0xf4, 0xf5, 0xe6, 0xe7, 0xf6, 0xf7,
	0x88, 0x89, 0x98, 0x99, 0x8a, 0x8b, 0x9a, 0x9b, 0xa8, 0xa9, 0xb8, 0xb9, 0xaa, 0xab, 0xba, 0xbb,
	0x8c, 0x8d, 0x9c, 0x9d, 0x8e, 0x8f, 0x9e, 0x9f, 0xac, 0xad, 0xbc, 0xbd, 0xae, 0xaf, 0xbe, 0xbf,
	0xc8, 0xc9, 0xd8, 0xd9, 0xca, 0xcb, 0xda, 0xdb, 0xe8, 0xe9, 0xf8, 0xf9, 0xea, 0xeb, 0xfa, 0xfb,
	0xcc, 0xcd, 0xdc, 0xdd, 0xce, 0xcf, 0xde, 0xdf, 0xec, 0xed, 0xfc, 0xfd, 0xee, 0xef, 0xfe, 0xff,
};

// 0 1 2 3 4 5 6 7 ---- 1 5 2 6 3 7 0 4
// 0 1 2 3 4 5 6 7 ---- 6 0 2 4 7 1 3 5
static const uint8_t inv_mix_row_1[256] = 
{
	0x00, 0x08, 0x80, 0x88, 0x01, 0x09, 0x81, 0x89, 0x10, 0x18, 0x90, 0x98, 0x11, 0x19, 0x91, 0x99,
	0x02, 0x0a, 0x82, 0x8a, 0x03, 0x0b, 0x83, 0x8b, 0x12, 0x1a, 0x92, 0x9a, 0x13, 0x1b, 0x93, 0x9b,
	0x20, 0x28, 0xa0, 0xa8, 0x21, 0x29, 0xa1, 0xa9, 0x30, 0x38, 0xb0, 0xb8, 0x31, 0x39, 0xb1, 0xb9,
	0x22, 0x2a, 0xa2, 0xaa, 0x23, 0x2b, 0xa3, 0xab, 0x32, 0x3a, 0xb2, 0xba, 0x33, 0x3b, 0xb3, 0xbb,
	0x04, 0x0c, 0x84, 0x8c, 0x05, 0x0d, 0x85, 0x8d, 0x14, 0x1c, 0x94, 0x9c, 0x15, 0x1d, 0x95, 0x9d,
	0x06, 0x0e, 0x86, 0x8e, 0x07, 0x0f, 0x87, 0x8f, 0x16, 0x1e, 0x96, 0x9e, 0x17, 0x1f, 0x97, 0x9f,
	0x24, 0x2c, 0xa4, 0xac, 0x25, 0x2d, 0xa5, 0xad, 0x34, 0x3c, 0xb4, 0xbc, 0x35, 0x3d, 0xb5, 0xbd,
	0x26, 0x2e, 0xa6, 0xae, 0x27, 0x2f, 0xa7, 0xaf, 0x36, 0x3e, 0xb6, 0xbe, 0x37, 0x3f, 0xb7, 0xbf,
	0x40, 0x48, 0xc0, 0xc8, 0x41, 0x49, 0xc1, 0xc9, 0x50, 0x58, 0xd0, 0xd8, 0x51, 0x59, 0xd1, 0xd9,
	0x42, 0x4a, 0xc2, 0xca, 0x43, 0x4b, 0xc3, 0xcb, 0x52, 0x5a, 0xd2, 0xda, 0x53, 0x5b, 0xd3, 0xdb,
	0x60, 0x68, 0xe0, 0xe8, 0x61, 0x69, 0xe1, 0xe9, 0x70, 0x78, 0xf0, 0xf8, 0x71, 0x79, 0xf1, 0xf9,
	0x62, 0x6a, 0xe2, 0xea, 0x63, 0x6b, 0xe3, 0xeb, 0x72, 0x7a, 0xf2, 0xfa, 0x73, 0x7b, 0xf3, 0xfb,
	0x44, 0x4c, 0xc4, 0xcc, 0x45, 0x4d, 0xc5, 0xcd, 0x54, 0x5c, 0xd4, 0xdc, 0x55, 0x5d, 0xd5, 0xdd,
	0x46, 0x4e, 0xc6, 0xce, 0x47, 0x4f, 0xc7, 0xcf, 0x56, 0x5e, 0xd6, 0xde, 0x57, 0x5f, 0xd7, 0xdf,
	0x64, 0x6c, 0xe4, 0xec, 0x65, 0x6d, 0xe5, 0xed, 0x74, 0x7c, 0xf4, 0xfc, 0x75, 0x7d, 0xf5, 0xfd,
	0x66, 0x6e, 0xe6, 0xee, 0x67, 0x6f, 0xe7, 0xef, 0x76, 0x7e, 0xf6, 0xfe, 0x77, 0x7f, 0xf7, 0xff,
};

// 0 1 2 3 4 5 6 7 ---- 2 6 3 7 0 4 1 5
// 0 1 2 3 4 5 6 7 ---- 4 6 0 2 5 7 1 3
static const uint8_t inv_mix_row_2[256] = 
{
	0x00, 0x04, 0x40, 0x44, 0x08, 0x0c, 0x48, 0x4c, 0x80, 0x84, 0xc0, 0xc4, 0x88, 0x8c, 0xc8, 0xcc,
	0x01, 0x05, 0x41, 0x45, 0x09, 0x0d, 0x49, 0x4d, 0x81, 0x85, 0xc1, 0xc5, 0x89, 0x8d, 0xc9, 0xcd,
	0x10, 0x14, 0x50, 0x54, 0x18, 0x1c, 0x58, 0x5c, 0x90, 0x94, 0xd0, 0xd4, 0x98, 0x9c, 0xd8, 0xdc,
	0x11, 0x15, 0x51, 0x55, 0x19, 0x1d, 0x59, 0x5d, 0x91, 0x95, 0xd1, 0xd5, 0x99, 0x9d, 0xd9, 0xdd,
	0x02, 0x06, 0x42, 0x46, 0x0a, 0x0e, 0x4a, 0x4e, 0x82, 0x86, 0xc2, 0xc6, 0x8a, 0x8e, 0xca, 0xce,
	0x03, 0x07, 0x43, 0x47, 0x0b, 0x0f, 0x4b, 0x4f, 0x83, 0x87, 0xc3, 0xc7, 0x8b, 0x8f, 0xcb, 0xcf,
	0x12, 0x16, 0x52, 0x56, 0x1a, 0x1e, 0x5a, 0x5e, 0x92, 0x96, 0xd2, 0xd6, 0x9a, 0x9e, 0xda, 0xde,
	0x13, 0x17, 0x53, 0x57, 0x1b, 0x1f, 0x5b, 0x5f, 0x93, 0x97, 0xd3, 0xd7, 0x9b, 0x9f, 0xdb, 0xdf,
	0x20, 0x24, 0x60, 0x64, 0x28, 0x2c, 0x68, 0x6c, 0xa0, 0xa4, 0xe0, 0xe4, 0xa8, 0xac, 0xe8, 0xec,
	0x21, 0x25, 0x61, 0x65, 0x29, 0x2d, 0x69, 0x6d, 0xa1, 0xa5, 0xe1, 0xe5, 0xa9, 0xad, 0xe9, 0xed,
	0x30, 0x34, 0x70, 0x74, 0x38, 0x3c, 0x78, 0x7c, 0xb0, 0xb4, 0xf0, 0xf4, 0xb8, 0xbc, 0xf8, 0xfc,
	0x31, 0x35, 0x71, 0x75, 0x39, 0x3d, 0x79, 0x7d, 0xb1, 0xb5, 0xf1, 0xf5, 0xb9, 0xbd, 0xf9, 0xfd,
	0x22, 0x26, 0x62, 0x66, 0x2a, 0x2e, 0x6a, 0x6e, 0xa2, 0xa6, 0xe2, 0xe6, 0xaa, 0xae, 0xea, 0xee,
	0x23, 0x27, 0x63, 0x67, 0x2b, 0x2f, 0x6b, 0x6f, 0xa3, 0xa7, 0xe3, 0xe7, 0xab, 0xaf, 0xeb, 0xef,
	0x32, 0x36, 0x72, 0x76, 0x3a, 0x3e, 0x7a, 0x7e, 0xb2, 0xb6, 0xf2, 0xf6, 0xba, 0xbe, 0xfa, 0xfe,
	0x33, 0x37, 0x73, 0x77, 0x3b, 0x3f, 0x7b, 0x7f, 0xb3, 0xb7, 0xf3, 0xf7, 0xbb, 0xbf, 0xfb, 0xff,


};

// 0 1 2 3 4 5 6 7 ---- 3 7 0 4 1 5 2 6
// 0 1 2 3 4 5 6 7 ---- 2 4 6 0 3 5 7 1
static const uint8_t inv_mix_row_3[256] = 
{
	0x00, 0x02, 0x20, 0x22, 0x04, 0x06, 0x24, 0x26, 0x40, 0x42, 0x60, 0x62, 0x44, 0x46, 0x64, 0x66,
	0x08, 0x0a, 0x28, 0x2a, 0x0c, 0x0e, 0x2c, 0x2e, 0x48, 0x4a, 0x68, 0x6a, 0x4c, 0x4e, 0x6c, 0x6e,
	0x80, 0x82, 0xa0, 0xa2, 0x84, 0x86, 0xa4, 0xa6, 0xc0, 0xc2, 0xe0, 0xe2, 0xc4, 0xc6, 0xe4, 0xe6,
	0x88, 0x8a, 0xa8, 0xaa, 0x8c, 0x8e, 0xac, 0xae, 0xc8, 0xca, 0xe8, 0xea, 0xcc, 0xce, 0xec, 0xee,
	0x01, 0x03, 0x21, 0x23, 0x05, 0x07, 0x25, 0x27, 0x41, 0x43, 0x61, 0x63, 0x45, 0x47, 0x65, 0x67,
	0x09, 0x0b, 0x29, 0x2b, 0x0d, 0x0f, 0x2d, 0x2f, 0x49, 0x4b, 0x69, 0x6b, 0x4d, 0x4f, 0x6d, 0x6f,
	0x81, 0x83, 0xa1, 0xa3, 0x85, 0x87, 0xa5, 0xa7, 0xc1, 0xc3, 0xe1, 0xe3, 0xc5, 0xc7, 0xe5, 0xe7,
	0x89, 0x8b, 0xa9, 0xab, 0x8d, 0x8f, 0xad, 0xaf, 0xc9, 0xcb, 0xe9, 0xeb, 0xcd, 0xcf, 0xed, 0xef,
	0x10, 0x12, 0x30, 0x32, 0x14, 0x16, 0x34, 0x36, 0x50, 0x52, 0x70, 0x72, 0x54, 0x56, 0x74, 0x76,
	0x18, 0x1a, 0x38, 0x3a, 0x1c, 0x1e, 0x3c, 0x3e, 0x58, 0x5a, 0x78, 0x7a, 0x5c, 0x5e, 0x7c, 0x7e,
	0x90, 0x92, 0xb0, 0xb2, 0x94, 0x96, 0xb4, 0xb6, 0xd0, 0xd2, 0xf0, 0xf2, 0xd4, 0xd6, 0xf4, 0xf6,
	0x98, 0x9a, 0xb8, 0xba, 0x9c, 0x9e, 0xbc, 0xbe, 0xd8, 0xda, 0xf8, 0xfa, 0xdc, 0xde, 0xfc, 0xfe,
	0x11, 0x13, 0x31, 0x33, 0x15, 0x17, 0x35, 0x37, 0x51, 0x53, 0x71, 0x73, 0x55, 0x57, 0x75, 0x77,
	0x19, 0x1b, 0x39, 0x3b, 0x1d, 0x1f, 0x3d, 0x3f, 0x59, 0x5b, 0x79, 0x7b, 0x5d, 0x5f, 0x7d, 0x7f,
	0x91, 0x93, 0xb1, 0xb3, 0x95, 0x97, 0xb5, 0xb7, 0xd1, 0xd3, 0xf1, 0xf3, 0xd5, 0xd7, 0xf5, 0xf7,
	0x99, 0x9b, 0xb9, 0xbb, 0x9d, 0x9f, 0xbd, 0xbf, 0xd9, 0xdb, 0xf9, 0xfb, 0xdd, 0xdf, 0xfd, 0xff,

};


static inline void Sbox_P_Layer(uint8_t *cipher, const uint8_t* state) 
{
	// Resort state by pLayer

	// Group 4
	cipher[0] = 
		(mix_row_0[state[0]] & 0xC0) |
		(mix_row_3[state[1]] & 0x30) |
		(mix_row_2[state[2]] & 0x0C) |
		(mix_row_1[state[3]] & 0x03);

	cipher[1] = 
		(mix_row_0[state[4]] & 0xC0) |
		(mix_row_3[state[5]] & 0x30) |
		(mix_row_2[state[6]] & 0x0C) |
		(mix_row_1[state[7]] & 0x03);

	// Group 3
	cipher[2] = 
		(mix_row_1[state[0]] & 0xC0) |
		(mix_row_0[state[1]] & 0x30) |
		(mix_row_3[state[2]] & 0x0C) |
		(mix_row_2[state[3]] & 0x03);

	cipher[3] = 
		(mix_row_1[state[4]] & 0xC0) |
		(mix_row_0[state[5]] & 0x30) |
		(mix_row_3[state[6]] & 0x0C) |
		(mix_row_2[state[7]] & 0x03);

	// Group 2
	cipher[4] = 
		(mix_row_2[state[0]] & 0xC0) |
		(mix_row_1[state[1]] & 0x30) |
		(mix_row_0[state[2]] & 0x0C) |
		(mix_row_3[state[3]] & 0x03);
		
	cipher[5] = 
		(mix_row_2[state[4]] & 0xC0) |
		(mix_row_1[state[5]] & 0x30) |
		(mix_row_0[state[6]] & 0x0C) |
		(mix_row_3[state[7]] & 0x03);

	// Group 1
	cipher[6] = 
		(mix_row_3[state[0]] & 0xC0) |
		(mix_row_2[state[1]] & 0x30) |
		(mix_row_1[state[2]] & 0x0C) |
		(mix_row_0[state[3]] & 0x03);

	cipher[7] = 
		(mix_row_3[state[4]] & 0xC0) |
		(mix_row_2[state[5]] & 0x30) |
		(mix_row_1[state[6]] & 0x0C) |
		(mix_row_0[state[7]] & 0x03);
}



// Find state by text XOR key
static inline void Inv_AddRoundKey(uint8_t *plain, const uint8_t *text, uint8_t key[][20], uint8_t rounds) 
{
	plain[0] = text[0] ^ key[rounds][0];
	plain[1] = text[1] ^ key[rounds][1];
	plain[2] = text[2] ^ key[rounds][2];
	plain[3] = text[3] ^ key[rounds][3];
	plain[4] = text[4] ^ key[rounds][4];
	plain[5] = text[5] ^ key[rounds][5];
	plain[6] = text[6] ^ key[rounds][6];
	plain[7] = text[7] ^ key[rounds][7];
}

// Find next round_key by key
static inline void Key_Initial(uint8_t round_key[][20], const uint8_t *key, uint8_t rounds) 
{
	round_key[0][0] = key[0];
	round_key[0][1] = key[1];
	round_key[0][2] = key[2];
	round_key[0][3] = key[3];
	round_key[0][4] = key[4];
	round_key[0][5] = key[5];
	round_key[0][6] = key[6];
	round_key[0][7] = key[7];
	round_key[0][8] = key[8];
	round_key[0][9] = key[9];

	uint8_t round_counter;
	uint8_t prev_round;

	for (round_counter = 1; round_counter <= rounds; round_counter++) 
	{
		prev_round = round_counter - 1;
		//find round_key
		round_key[round_counter][9] = round_key[prev_round][6] << 5 | round_key[prev_round][7] >> 3;
		round_key[round_counter][8] = round_key[prev_round][5] << 5 | round_key[prev_round][6] >> 3;
		round_key[round_counter][7] = round_key[prev_round][4] << 5 | round_key[prev_round][5] >> 3;
		round_key[round_counter][6] = round_key[prev_round][3] << 5 | round_key[prev_round][4] >> 3;
		round_key[round_counter][5] = round_key[prev_round][2] << 5 | round_key[prev_round][3] >> 3;
		round_key[round_counter][4] = round_key[prev_round][1] << 5 | round_key[prev_round][2] >> 3;
		round_key[round_counter][3] = round_key[prev_round][0] << 5 | round_key[prev_round][1] >> 3;
		round_key[round_counter][2] = round_key[prev_round][9] << 5 | round_key[prev_round][0] >> 3;
		round_key[round_counter][1] = round_key[prev_round][8] << 5 | round_key[prev_round][9] >> 3;
		round_key[round_counter][0] = round_key[prev_round][7] << 5 | round_key[prev_round][8] >> 3;

		round_key[round_counter][0] = (round_key[round_counter][0] & 0x0F) | sbox[round_key[round_counter][0] >> 4];

		round_key[round_counter][7] ^= round_counter >> 1;
		round_key[round_counter][8] ^= round_counter << 7;
	}
}

// Find state by text
static inline void Inv_Sbox_P_Layer(uint8_t *state, const uint8_t* text) 
{
	// Resort state by pLayer

	// Group 4
	state[0] = inv_sbox_2[
		(inv_mix_row_0[text[0]] & 0x88) |
		(inv_mix_row_1[text[2]] & 0x44) |
		(inv_mix_row_2[text[4]] & 0x22) |
		(inv_mix_row_3[text[6]] & 0x11)
	];

	state[1] = inv_sbox_2[
		(inv_mix_row_3[text[0]] & 0x88) |
		(inv_mix_row_0[text[2]] & 0x44) |
		(inv_mix_row_1[text[4]] & 0x22) |
		(inv_mix_row_2[text[6]] & 0x11)
	];

	// Group 3
	state[2] = inv_sbox_2[
		(inv_mix_row_2[text[0]] & 0x88) |
		(inv_mix_row_3[text[2]] & 0x44) |
		(inv_mix_row_0[text[4]] & 0x22) |
		(inv_mix_row_1[text[6]] & 0x11)
	];

	state[3] = inv_sbox_2[
		(inv_mix_row_1[text[0]] & 0x88) |
		(inv_mix_row_2[text[2]] & 0x44) |
		(inv_mix_row_3[text[4]] & 0x22) |
		(inv_mix_row_0[text[6]] & 0x11)
	];

	// Group 2
	state[4] = inv_sbox_2[
		(inv_mix_row_0[text[1]] & 0x88) |
		(inv_mix_row_1[text[3]] & 0x44) |
		(inv_mix_row_2[text[5]] & 0x22) |
		(inv_mix_row_3[text[7]] & 0x11)
	];
	
	state[5] = inv_sbox_2[
		(inv_mix_row_3[text[1]] & 0x88) |
		(inv_mix_row_0[text[3]] & 0x44) |
		(inv_mix_row_1[text[5]] & 0x22) |
		(inv_mix_row_2[text[7]] & 0x11)
	];	

	// Group 1
	state[6] = inv_sbox_2[
		(inv_mix_row_2[text[1]] & 0x88) |
		(inv_mix_row_3[text[3]] & 0x44) |
		(inv_mix_row_0[text[5]] & 0x22) |
		(inv_mix_row_1[text[7]] & 0x11)
	];
	
	state[7] = inv_sbox_2[
		(inv_mix_row_1[text[1]] & 0x88) |
		(inv_mix_row_2[text[3]] & 0x44) |
		(inv_mix_row_3[text[5]] & 0x22) |
		(inv_mix_row_0[text[7]] & 0x11)
	];
}


// Find state by text XOR key
static inline void AddRoundKey(uint8_t *state, const uint8_t *text, const uint8_t *key) 
{
	state[0] = text[0] ^ key[0];
	state[1] = text[1] ^ key[1];
	state[2] = text[2] ^ key[2];
	state[3] = text[3] ^ key[3];
	state[4] = text[4] ^ key[4];
	state[5] = text[5] ^ key[5];
	state[6] = text[6] ^ key[6];
	state[7] = text[7] ^ key[7];
}

// Find next round_key by key
static inline void KeyUpdateFull(uint8_t *round_key, const uint8_t *key, const uint8_t round_counter) 
{
	//save key 7-9, for round_key may equal to key
	uint8_t temp_0 = key[7];
	uint8_t temp_1 = key[8];
	uint8_t temp_2 = key[9];

	//find round_key
	round_key[9] = key[6] << 5 | key[7] >> 3;
	round_key[8] = key[5] << 5 | key[6] >> 3;
	round_key[7] = key[4] << 5 | key[5] >> 3;
	round_key[6] = key[3] << 5 | key[4] >> 3;
	round_key[5] = key[2] << 5 | key[3] >> 3;
	round_key[4] = key[1] << 5 | key[2] >> 3;
	round_key[3] = key[0] << 5 | key[1] >> 3;
	round_key[2] = temp_2 << 5 | key[0] >> 3;
	round_key[1] = temp_1 << 5 | temp_2 >> 3;
	round_key[0] = temp_0 << 5 | temp_1 >> 3;

	round_key[0] = (round_key[0] & 0x0F) | (sbox[round_key[0] >> 4]);

	round_key[7] ^= round_counter >> 1;
	round_key[8] ^= round_counter << 7;
}



// Full-round should be 31, i.e. rounds = 31
// Plain and cipher can overlap, so do key and cipher
void present_rounds(const uint8_t *plain, const uint8_t *key, const uint8_t rounds, uint8_t *cipher) 
{
	uint8_t round_counter = 1;
	uint8_t state[8];
	uint8_t round_key[10];

	// Inital key
	GenerateRoundKeys(round_key, key, round_counter);

	// Add key
	AddRoundKey(state, plain, key);

	// Substitution and permutation
	Sbox_P_Layer(cipher, state);

	for (round_counter = 2; round_counter <= rounds; round_counter++) 
	{
		// Add key
		AddRoundKey(state, cipher, round_key);
		
		// Substitution and permutation
		Sbox_P_Layer(cipher, state);

		// Find next round_key
		KeyUpdate(round_key, round_counter);
	}

	// if round is not equal to 31, then do not perform the last adding key operation
	// this can be used in constructing PRESENT based algorithm, such as MAC
	if (31 == rounds) 
	{
		AddRoundKey(cipher, cipher, round_key);
	}
}
// full-round should be 31, i.e. rounds = 31


// plain and cipher can overlap, so do key and cipher
void present_decrypt_rounds(const uint8_t *cipher, const uint8_t *key, const uint8_t rounds, uint8_t *plain) 
{
	uint8_t round_counter = 1;
	uint8_t state[16];

	// Contains all round keys in this variable, round_key[0][] is key.
	// Inital the key
	uint8_t round_key[32][20];
	Key_Initial(round_key, key, rounds);

	// If round not equal to 31, then do not perform the last decoding key operation
	if (31 == rounds) 
	{
		Inv_AddRoundKey(plain, cipher, round_key, 31);
	}
	
	// If round equal to 31, we use plain to find state
	// If round not equal to 31, we use cipher to find state
	if (31 == rounds) 
	{
		Inv_Sbox_P_Layer(state, plain);
	} 
	else 
	{
		Inv_Sbox_P_Layer(state, cipher);
	}

	// The end of round rounds, find plain for round rounds
	Inv_AddRoundKey(plain, state, round_key, rounds - 1);

	// Back find plaintext. Begin from rounds - 1 and end at 1
	for (round_counter = (rounds - 1); round_counter >= 1; round_counter--)
	{
		// Substitution and permutation
		Inv_Sbox_P_Layer(state, plain);

		// The end of round round_counter, find plain for round round_counter
		Inv_AddRoundKey(plain, state, round_key, round_counter - 1);
	}
}
